openapi: '3.0.2'
info:
  title: POOSD LAMP Small Project
  version: '1.0'
servers:
  - url: http://cop4331smallprojectfall21.fun/LAMPAPI
paths:
  /Login.php:
    post:
      description: Sees if some user exists in our system or not. If not, error will contain "No Records Found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: "MScott@SmallProject.com"
                password:
                  type: string
                  example: COP4331m
      responses:
        '200':
          description: User ID, first name, and last name
          content:
            application/json:
              schema: 
                properties:
                  id:
                    type: integer
                    example: 6
                  firstName:
                    type: string
                    example: Mahlon
                  lastName:
                    type: string
                    example: Scott
                  error:
                    type: string
                    example: "No error"
  /Register.php:
    post:
      description: Registers a new user. Note we are supposed to be using client-side hashing. Set test to true if you don't actually want to add the user to the database. 
      requestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: welcome@gmail.com
                  password:
                    type: string
                    example: 5f4dcc3b5aa765d61d8327deb882cf99
                  firstName: 
                    type: string
                    example: Joe
                  lastName:
                    type: string
                    example: Smith
                  phone:
                    type: string
                    example: "407-342-4321"
                  major:
                    type: string
                    example: Computer Science
                  test:
                    type: boolean
                    example: True
      responses:
        '200':
          description: Whether or not a user was created. If not, result will be "Error creating new user; error description". Returns ID of new user if successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "User successfully created."
                  id:
                    type: integer
                    example: 2
  /CreateContact.php:
    post:
      description: Creates a new contact for the provided user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userID:
                  type: integer
                  example: 1
                lastname:
                  type: string
                  example: Smith
                firstname:
                  type: string
                  example: Joe
                phone:
                  type: string
                  example: "000-000-0000"
                email:
                  type: string
                  example: "guy@place.com"
      responses:
        '200':
          description: Whether a new contact was created or not. If not, result will contain "Error creating contact;" If creation is successful, returns "Contact created successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Contact created successfully."
  /UpdateContact.php:
    post:
      description: Modifies an existing contact, uses email to identify which contact to modify. Does not modify any information not specified in modifications.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userID:
                  type: integer
                  example: 1
                email:
                  type: string
                  example: "guy@place.com"
                modifications:
                  type: object
                  properties:
                    lastname:
                      type: string
                      example: Smithy
                    firstname:
                      type: string
                      example: Joed
                    phone:
                      type: string
                      example: "002-000-0000"
                    email:
                      type: string
                      example: "guy2@place.com"
      responses:
        '200':
          description: Whether or not modification was successful. If unsuccessful, result will be "Error, contact with that email does not exist." Otherwise, returns "Contact modification succeeded."
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Contact modification succeeded."
  /DeleteContact.php:
    post:
      description: Deletes a contact, specified by email.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userID:
                  type: integer
                  example: 1
                email:
                  type: string
                  example: "guy@place.com"
      responses:
        '200':
          description: Whether or not deletion was successful. If unsuccessful, result will be "Error, contact with that email does not exist." Otherwise, returns "Contact deletion succeeded."
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Contact deletion succeeded."
  /GetContacts.php:
    get:
      description: Gets the list of contacts for a user.
      parameters:
        - in: query
          name: userID
          schema:
            type: integer
          example: 1
          description: "The ID of the user whose contact list we want to get"
      responses:
        '200':
          description: The list of contacts for the user, note that the userID should be the same for all contacts in the list and is unnecessary.
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: object
                  properties:
                    userID:
                      type: integer
                      example: 1
                    FirstName:
                      type: string
                      example: Joe
                    LastName:
                      type: string
                      example: Smith
                    Email:
                      type: string
                      example: "guy@place.com"
                    Phone:
                      type: string
                      example: "000-000-0000"
  /SearchContacts.php:
    get:
      description: Searches a user's contacts, partially matching the input string to their phone, email, first name, and last name.
      parameters:
        - in: query
          name: userID
          schema:
            type: integer
          example: 1
          description: "The ID of the user whose contact list we want to search"
        - in: query
          name: pattern
          schema:
            type: string
          example: "J"
          description: "The string we are partially matching"
      responses:
        '200':
          description: The list of contacts containing pattern, note that the userID should be the same for all contacts in the list and is unnecessary.
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: object
                  properties:
                    userID:
                      type: integer
                      example: 1
                    FirstName:
                      type: string
                      example: Joe
                    LastName:
                      type: string
                      example: Smith
                    Email:
                      type: string
                      example: "guy@place.com"
                    Phone:
                      type: string
                      example: "000-000-0000"